{
    "Resources": {
        "LogGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/cloudwatch/LogGroup.json"
            },
            "Condition": "EULACondition"
        },
        "DeployBucket": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/buckets/DeployBucket.json"
            },
            "Condition": "EULACondition"
        },
        "DeployBucketPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeployBucket": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "LambdaDeployRole": { "Fn::GetAtt": ["LambdaDeployRole", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/DeployBucketPolicy.json"
            },
            "Condition": "EULACondition"
        },
        "LambdaDeployRole": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/roles/LambdaDeployRole.json"
            },
            "Condition": "EULACondition"
        },
        "StorePasswordLambda": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "LambdaDeployRole": { "Fn::GetAtt": ["LambdaDeployRole", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/lambdas/StorePasswordLambda.json"
            },
            "Condition": "EULACondition"
        },
		"DeletePasswordLambda": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "LambdaDeployRole": { "Fn::GetAtt": ["LambdaDeployRole", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/lambdas/DeletePasswordLambda.json"
            },
            "Condition": "EULACondition"
        },
        "StoreMasterPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "StorePasswordLambda": { "Fn::GetAtt": ["StorePasswordLambda", "Outputs.Arn"] },
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "VaultMasterPassword": { "Ref": "VaultMasterPassword" }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/StoreMasterPassword.json"
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
		"StoreAdminPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "StorePasswordLambda": { "Fn::GetAtt": ["StorePasswordLambda", "Outputs.Arn"] },
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "VaultAdminPassword": { "Ref": "VaultAdminPassword" }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/StoreAdminPassword.json"
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "StoreDRPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "StorePasswordLambda": { "Fn::GetAtt": ["StorePasswordLambda", "Outputs.Arn"] },
                    "VaultDRPassword": { "Ref": "VaultDRPassword" }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/StoreDRPassword.json"
            },
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
		"CleanMasterPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "MasterPasswordFileId": { "Fn::GetAtt": ["StoreMasterPassword", "Outputs.FileId"] },
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "DeletePasswordLambda": { "Fn::GetAtt": ["DeletePasswordLambda", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/CleanMasterPassword.json"
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
				"VaultDRMachine"
            ]
        },
		"CleanAdminPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "AdminPasswordFileId": { "Fn::GetAtt": ["StoreAdminPassword", "Outputs.FileId"] },
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "DeletePasswordLambda": { "Fn::GetAtt": ["DeletePasswordLambda", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/CleanAdminPassword.json"
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
				"ComponentsMachine"
            ]
        },
        "CleanDRPassword": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DRPasswordFileId": { "Fn::GetAtt": ["StoreDRPassword", "Outputs.FileId"] },
                    "BucketId": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "DeletePasswordLambda": { "Fn::GetAtt": ["DeletePasswordLambda", "Outputs.Arn"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/resources/CleanDRPassword.json"
            },
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
				"VaultDRMachine"
            ]
        },
        "VaultMachine": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "VaultInstanceName": { "Ref": "VaultInstanceName" },
                    "VaultInstanceSecurityGroups": {
                        "Fn::Join": [
                            ",",
                            { "Ref": "VaultInstanceSecurityGroups" }
                        ]
                    },
                    "VaultInstanceSubnetId": { "Ref": "VaultInstanceSubnetId" },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "RegionMap",
                            { "Ref": "AWS::Region" },
                            "Vault"
                        ]    
                    },
                    "VaultInstanceType": { "Ref": "VaultInstanceType" },
                    "InstanceProfile": { "Fn::GetAtt": ["InstanceProfile", "Outputs.Name"] },
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] },
                    "KeyName": { "Ref": "KeyName" },
                    "AWSEC2WindowsCloudWatchJSON": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/shared/AWS.EC2.Windows.CloudWatch.json"
                            }
                        }
                    },
                    "DeployPy": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/pas-aio-dr/deploy-vault-with-dr.py.json"
                            }
                        }
                    },
                    "VaultHostName": "cyberark-vault",
                    "LogGroup": { "Fn::GetAtt": ["LogGroup", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/machines/VaultMachine.json"
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DependsOn": [
                "StoreMasterPassword",
                "StoreAdminPassword"
            ]
        },
        "VaultDRMachine": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "VaultInstanceName": { "Ref": "VaultInstanceName" },
                    "VaultInstanceSecurityGroups": {
                        "Fn::Join": [
                            ",",
                            { "Ref": "VaultInstanceSecurityGroups" }
                        ]
                    },
                    "DRInstanceSubnetId": { "Ref": "DRInstanceSubnetId" },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "RegionMap",
                            { "Ref": "AWS::Region" },
                            "Vault"
                        ]    
                    },
                    "VaultInstanceType": { "Ref": "VaultInstanceType" },
                    "InstanceProfile": { "Fn::GetAtt": ["InstanceProfile", "Outputs.Name"] },
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] },
                    "KeyName": { "Ref": "KeyName" },
                    "AWSEC2WindowsCloudWatchJSON": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/shared/AWS.EC2.Windows.CloudWatch.json"
                            }
                        }
                    },
                    "DeployPy": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/pas-aio-dr/deploy-vaultdr.py.json"
                            }
                        }
                    },
                    "VaultHostName": "cyberark-vault-dr",
                    "LogGroup": { "Fn::GetAtt": ["LogGroup", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/machines/VaultDRMachine.json"
            },
            "DependsOn": [
                "VaultMachine"
            ],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "InstanceProfile": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/profiles/InstanceProfile.json"
            },
            "Condition": "EULACondition"
        },
        "InstanceRole": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "PrincipalForRole": {
                        "Fn::FindInMap": [
                            "Region2Principal",
                            {
                                "Ref": "AWS::Region"
                            },
                            "EC2Principal"
                        ]
                    },
                    "ResourceForPolicy": {
                        "Fn::FindInMap": [
                            "Region2ARNPrefix",
                            { "Ref": "AWS::Region" },
                            "ARNPrefix"
                        ]
                    }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/roles/InstanceRole.json"
            },
            "Condition": "EULACondition"
        },
        "ComponentS3DeployBucketPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeployBucket": { "Ref": "DeployBucket" },
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] },
                    "AdminPasswordFileId": { "Fn::GetAtt": ["StoreAdminPassword", "Outputs.FileId"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/ComponentS3DeployBucketPolicy.json"
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesKMSPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/VaultInstancesKMSPolicy.json"
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "VaultInstancesS3VaultFilesBucketPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "VaultFilesBucket": { "Ref": "VaultFilesBucket" },
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/VaultInstancesS3VaultFilesBucketPolicy.json"
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesS3DeployBucketPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeployBucket": { "Fn::GetAtt": ["DeployBucket", "Outputs.Id"] },
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/VaultInstancesS3DeployBucketPolicy.json"
            },
            "Condition": "EULACondition"
        },
        "VaultBootstrapKMSPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "InstanceRole": { "Fn::GetAtt": ["InstanceRole", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/policies/VaultBootstrapKMSPolicy.json"
            }
        },
        "ComponentsMachine": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "InstanceName": { "Ref": "ComponentsInstanceName" },
                    "InstanceSecurityGroups": {
                        "Fn::Join": [
                            ",",
                            { "Ref": "ComponentsInstanceSecurityGroups" }
                        ]
                    },
                    "InstanceSubnetId": { "Ref": "ComponentsInstanceSubnetId" },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "RegionMap",
                            { "Ref": "AWS::Region" },
                            "Components"
                        ]    
                    },
                    "InstanceType": { "Ref": "ComponentsInstanceType" },
                    "InstanceProfile": { "Fn::GetAtt": ["InstanceProfile", "Outputs.Name"] },
                    "KeyName": { "Ref": "KeyName" },
                    "AWSEC2WindowsCloudWatchJSON": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/shared/AWS.EC2.Windows.CloudWatch.json"
                            }
                        }
                    },
                    "deployCPM": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/pas-aio-dr/deploy-cpm-with-dr.py.json"
                            }
                        }
                    },
                    "deployPVWA": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/pas-aio-dr/deploy-pvwa-with-dr.py.json"
                            }
                        }
                    },
                    "deployPSM": {
                        "Fn::Transform" : {
                            "Name" : "AWS::Include",
                            "Parameters" : {
                                "Location" : "s3://avishay/includes/files/pas-aio-dr/deploy-psm-with-dr.py.json"
                            }
                        }
                    },
                    "HostName": "components-machine",
                    "LogGroup": { "Fn::GetAtt": ["LogGroup", "Outputs.Name"] }
                },
                "TemplateURL": "https://s3-eu-west-2.amazonaws.com/pas-on-cloud/includes/machines/ComponentsMachine.json"
            },
            "DependsOn": [
                "VaultDRMachine"
            ],
            "Condition": "",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT20M"
                }
            }
        }
    },
    "Parameters": {
        "EULA": {
            "Type": "String",
            "Description": "I have read and agree to the Terms and Conditions.",
            "AllowedValues": [
                "Accept",
                "Decline"
            ],
            "Default": "Decline"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Key Pair from your AWS account.",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VaultFilesBucket": {
            "Type": "String",
            "Description": "Enter the name of the bucket containing the license and recovery public key."
        },
        "LicenseFile": {
            "Type": "String",
            "Description": "Enter the path of the license file within the bucket.",
            "Default": "license.xml"
        },
        "RecoveryPublicKey": {
            "Type": "String",
            "Description": "Enter the path of the recovery public key file within the bucket.",
            "Default": "recpub.key"
        },
        "VaultInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the Vault instance.",
            "Default": "CyberArk Vault"
        },
        "VaultMasterPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8,
	    "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
	    "ConstraintDescription": "Vault Master password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
	"RetypeMasterPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Master user.",
            "NoEcho": true,
	    "MinLength": 8
        },
        "VaultAdminPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Administrator user.",
            "NoEcho": true,
	    "MinLength": 8,
	    "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
	    "ConstraintDescription": "Vault Administrator password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
	"RetypeAdminPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Administrator user.",
            "NoEcho": true,
	    "MinLength": 8
        },
        "VaultInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the Vault instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
        "VaultInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the Vault instance."
        },
        "VaultInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault instance will reside."
        },
        "ComponentsInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the PAS Components instance.",
            "Default": "CyberArk Components"
        },
        "ComponentsInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the PAS Components instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
        "ComponentsInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the PAS Components instance."
        },
        "ComponentsInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the PAS Components instance will reside."
        },
        "VaultDRPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8,
	        "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
	        "ConstraintDescription": "Vault DR password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
        "RetypeDRPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Administrator user.",
            "NoEcho": true,
	        "MinLength": 8
        },
        "DRInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault DR instance will reside."
        }
    },
    "Conditions": {
        "EULACondition": {
            "Fn::Equals": [
                "Accept",
                {
                    "Ref": "EULA"
                }
            ]
        }
    },
    "Rules": {
        "PasswordConfirmation": {
            "Assertions": [
              {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultMasterPassword"}, {"Ref": "RetypeMasterPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              },
			  {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultAdminPassword"}, {"Ref": "RetypeAdminPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              },
              {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultDRPassword"}, {"Ref": "RetypeDRPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              }
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Parameters"
                    },
                    "Parameters": [
                        "EULA",
                        "KeyName",
                        "VaultFilesBucket",
                        "LicenseFile",
                        "RecoveryPublicKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Vault Configuration"
                    },
                    "Parameters": [
                        "VaultInstanceName",
                        "VaultMasterPassword",
						"RetypeMasterPassword",
                        "VaultAdminPassword",
						"RetypeAdminPassword",
                        "VaultInstanceType",
                        "VaultInstanceSecurityGroups",
                        "VaultInstanceSubnetId"
                    ]
                },
                {
                    "Label": {
                        "default": "Components Configuration"
                    },
                    "Parameters": [
                        "ComponentsInstanceName",
                        "ComponentsInstanceType",
                        "ComponentsInstanceSecurityGroups",
                        "ComponentsInstanceSubnetId"
                    ]
                }
            ],
            "ParameterLabels": {
                "EULA": {
                    "default": "License Agreement"
                },
                "KeyName": {
                    "default": "Key Pair"
                },
                "VaultFilesBucket": {
                    "default": "Vault Files Bucket"
                },
                "LicenseFile": {
                    "default": "License File"
                },
                "RecoveryPublicKey": {
                    "default": "Recovery Public Key"
                },
                "VaultInstanceName": {
                    "default": "Vault Instance Name"
                },
                "VaultMasterPassword": {
                    "default": "Vault Master Password"
                },
				"RetypeMasterPassword": {
                    "default": "Retype Master Password"
                },
                "VaultAdminPassword": {
                    "default": "Vault Admin Password"
                },
				"RetypeAdminPassword": {
                    "default": "Retype Admin Password"
                },
                "VaultInstanceType": {
                    "default": "Vault Instance Type"
                },
                "VaultInstanceSecurityGroups": {
                    "default": "Vault Instance Security Groups"
                },
                "VaultInstanceSubnetId": {
                    "default": "Vault Instance Subnet Id"
                },
                "ComponentsInstanceName": {
                    "default": "Components Instance Name"
                },
                "ComponentsInstanceType": {
                    "default": "Components Instance Type"
                },
                "ComponentsInstanceSecurityGroups": {
                    "default": "Components Instance Security Groups"
                },
                "ComponentsInstanceSubnetId": {
                    "default": "Components Instance Subnet Id"
                },
                "VaultDRPassword": {
                    "default": "Vault DR Password"
                },
				"RetypeDRPassword": {
                    "default": "Retype Vault DR Password"
                },
                "DRInstanceSubnetId": {
                    "default": "VaultDR Instance Subnet Id"
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "Fn::Transform" : {
                "Name" : "AWS::Include",
                "Parameters" : {
                    "Location" : "s3://avishay/includes/mappings/RegionMap.json"
                 }
             }
        },
        "Region2ARNPrefix": {
            "Fn::Transform" : {
                "Name" : "AWS::Include",
                "Parameters" : {
                    "Location" : "s3://avishay/includes/mappings/Region2ARNPrefix.json"
                }
            }
        },
        "Region2Principal":{
            "Fn::Transform" : {
                "Name" : "AWS::Include",
                "Parameters" : {
                    "Location" : "s3://avishay/includes/mappings/Region2Principal.json"
                }
            }
        }
    },
    "Outputs": {
        "CloudWatchLogGroupName": {
            "Description": "The name of the CloudWatch log group",
            "Value": {
                "Ref": "LogGroup"
            }
        }
    }
}
